---
description: 如何存檔更新日誌
title: 如何存檔更新日誌
language: zh-TW
version: 1.0.0
---

- changelog = "https://github.com/olivierlacan/keep-a-changelog/blob/master/CHANGELOG.md"
- gemnasium = "https://gemnasium.com/"
- gh = "https://github.com/olivierlacan/keep-a-changelog"
- issues = "https://github.com/olivierlacan/keep-a-changelog/issues"
- semver = "http://semver.org/"
- shields = "http://shields.io/"
- thechangelog = "http://5by5.tv/changelog/127"
- vandamme = "https://github.com/tech-angels/vandamme/"
- iso = "http://www.iso.org/iso/home/standards/iso8601.htm"
- ghr = "https://help.github.com/articles/creating-releases/"

.header
  .title
    %h1 如何存檔更新日誌
    %h2 更新日誌有別於 git 日誌。

  = link_to changelog do
    Version
    %strong= current_page.metadata[:page][:version]

  %pre.changelog= File.read("CHANGELOG.md")

.answers
  %h3#what
    %a.anchor{ href: "#what", aria_hidden: "true" }
    更新日誌是甚麼？

  %p
    更新日誌（changelog）是一份含括了一個方案中經過整理後倒敘式的各個版本重大變更清單檔。

  %h3#why
    %a.anchor{ href: "#why", aria_hidden: "true" }
    存檔更新日誌的緣由？

  %p
    爲了讓使用者和開發人員更精準地明瞭項目的各個發佈版（或版本）間有何顯著變更。

  %h3#who
    %a.anchor{ href: "#who", aria_hidden: "true" }
    更新日誌爲誰而設？

  %p
    爲衆而生。無論是使用者還是開發人員，軟體的最終使用者或會在意軟體中含括了甚麼。
    當軟體進行了變更，通常大夥都希望瞭解這個變更的緣由及其過程。

.good-practices
  %h3#how
    %a.anchor{ href: "#how", aria_hidden: "true" }
    如何製作一份品質上乘的變更日誌？

  %h4#principles
    %a.anchor{ href: "#principles", aria_hidden: "true" }
    指導方針

  %ul
    %li
      更新日誌是爲<em>人</em>而作，而非爲機器。
    %li
      每個單獨的版本都應有且僅有一個條目。
    %li
      將同類型的變更組合在一起進行記錄。
    %li
      版本與章節間應可參照連結。
    %li
      新版在前。
    %li
      應羅列各個版本的發佈日期。
    %li
      記載是否遵循#{link_to "語義化版本", semver}.

  %a.anchor{ href: "#types", aria_hidden: "true" }
  %h4#types 變更類型

  %ul
    %li
      %code Added
      新增的功能特性。
    %li
      %code Changed
      對現存功能的變更。
    %li
      %code Deprecated
      不久便會被移除的功能特性。
    %li
      %code Removed
      如今移除的功能特性。
    %li
      %code Fixed
      缺陷修復。
    %li
      %code Security
      預防軟件缺陷。

.effort

  %h3#effort
    %a.anchor{ href: "#effort", aria_hidden: "true" }
    如何才能合理地減少削減存檔變更日誌所需的精力？

  %p
    將所追蹤的未來的變更保留附有 <code>Unreleased</code> 的頂部。

  %p 這將有兩方面的用處：

  %ul
    %li
      未來的發佈版中被寄予希望的變更將公佈於衆；
    %li
      發佈時，將 <code>Unreleased</code> 部分變爲新的發佈版便可。

.bad-practices
  %h3#bad-practices
    %a.anchor{ href: "#bad-practices", aria_hidden: "true" }
    變更日誌很爛？

  %p 確實，有些情況可使得變更日誌變得似乎無甚功用。

  %h4#log-diffs
    %a.anchor{ href: "#log-diffs", aria_hidden: "true" }
    將代碼差異日誌直接提交到變更日誌

  %p
    將代碼差異日誌作爲變更日誌並不好：其干擾資訊過多。形如合併的提交、無題的提交和文檔變更之類……

  %p
    代碼提交的目的之一係記錄原始碼的每一次進化。然而存在有些項目並非如此。

  %p
    變更日誌條目的功用係記錄顯著的差異以清晰地告知最終用戶，其所記錄通常跨多次提交。

  %h4#ignoring-deprecations
    %a.anchor{ href: "#ignoring-deprecations", aria_hidden: "true" }
    無視棄用項

  %p
    當由某個版本升級至另一個版本時，某些得不到繼續的項應當被明瞭地告知無疑。
    或許將被棄用項列出並作爲一個中間版本，以告知用戶後續升級將致棄用項，爾後再發佈可讓用戶升級至已不包含棄用項的版本。

  %p
    If you do nothing else, list deprecations, removals, and any
    breaking changes in your changelog.


  %h4#confusing-dates
    %a.anchor{ href: "#confusing-dates", aria_hidden: "true" }
    Confusing Dates

  %p
    In the U.S., people put the month first (<code>06-02-2012</code> for
    June 2nd, 2012), while many people in the rest of the world write a
    robotic-looking <code>2 June 2012</code>, yet pronounce it
    differently. <code>2012-06-02</code> works logically from largest to
    smallest, doesn't overlap in ambiguous ways with other date formats,
    and is an #{link_to "ISO standard", iso}. Thus, it is the
    recommended date format for changelogs.

  %aside
    There’s more. Help me collect these antipatterns by
    = link_to "opening an issue", "#issues"
    or a pull request.

.frequently-asked-questions
  %h3#frequently-asked-questions
    %a.anchor{ href: "#frequently-asked-questions", aria_hidden: "true" }
    Frequently Asked Questions

  %h4#standard
    %a.anchor{ href: "#standard", aria_hidden: "true" }
    Is there a standard changelog format?

  %p
    Not really. There's the GNU changelog style guide, or the two-
    paragraph-long GNU NEWS file "guideline". Both are inadequate or
    insufficient.

  %p
    This project aims to be
    = link_to "a better changelog convention.", changelog
    It comes from observing good practices in the open source
    community and gathering them.

  %p
    Healthy criticism, discussion and suggestions for improvements
    = link_to "are welcome.", issues


  %h4#filename
    %a.anchor{ href: "#filename", aria_hidden: "true" }
    What should the changelog file be named?

  %p
    Call it <code>CHANGELOG.md</code>. Some projects use
    <code>HISTORY</code>, <code>NEWS</code> or <code>RELEASES</code>.

  %p
    While it's easy to think that the name of your changelog file
    doesn't matter that much, why make it harder for your end users to
    consistently find notable changes?

  %h4#github-releases
    %a.anchor{ href: "#github-releases", aria_hidden: "true" }
    What about GitHub Releases?

  %p
    It's a great initiative. #{link_to "Releases", ghr} can be used to
    turn simple git tags (for example a tag named <code>v1.0.0</code>)
    into rich release notes by manually adding release notes or it can
    pull annotated git tag messages and turn them into notes.

  %p
    GitHub Releases create a non-portable changelog that can only be
    displayed to users within the context of GitHub. It's possible to
    make them look very much like the Keep a Changelog format, but it
    tends to be a bit more involved.

  %p
    The current version of GitHub releases is also arguably not very
    discoverable by end-users, unlike the typical uppercase files
    (<code>README</code>, <code>CONTRIBUTING</code>, etc.). Another
    minor issue is that the interface doesn't currently offer links to
    commit logs between each release.

  %h4#automatic
    %a.anchor{ href: "#automatic", aria_hidden: "true" }
    Can changelogs be automatically parsed?

  %p
    It’s difficult, because people follow wildly different formats and
    file names.

  %p
    #{link_to "Vandamme", vandamme} is a Ruby gem created by the
    #{link_to "Gemnasium", gemnasium} team and which parses many (but
    not all) open source project changelogs.


  %h4#yanked
    %a.anchor{ href: "#yanked", aria_hidden: "true" }
    What about yanked releases?

  %p
    Yanked releases are versions that had to be pulled because of a
    serious bug or security issue. Often these versions don't even
    appear in change logs. They should. This is how you should display
    them:

  %p <code>## 0.0.5 - 2014-12-13 [YANKED]</code>

  %p
    The <code>[YANKED]</code> tag is loud for a reason. It's important
    for people to notice it. Since it's surrounded by brackets it's also
    easier to parse programmatically.


  %h4#rewrite
    %a.anchor{ href: "#rewrite", aria_hidden: "true" }
    Should you ever rewrite a changelog?

  %p
    Sure. There are always good reasons to improve a changelog. I
    regularly open pull requests to add missing releases to open source
    projects with unmaintained changelogs.

  %p
    It's also possible you may discover that you forgot to address a
    breaking change in the notes for a version. It's obviously important
    for you to update your changelog in this case.


  %h4#contribute
    %a.anchor{ href: "#contribute", aria_hidden: "true" }
    How can I contribute?

  %p
    This document is not the <strong>truth</strong>; it’s my carefully
    considered opinion, along with information and examples I gathered.

  %p
    This is because I want our community to reach a consensus. I believe
    the discussion is as important as the end result.

  %p
    So please <strong>#{link_to "pitch in", gh}</strong>.

.press
  %h3 Conversations
  %p
    I went on #{link_to "The Changelog podcast", thechangelog}
    to talk about why maintainers and contributors should care about changelogs,
    and also about the motivations behind this project.
